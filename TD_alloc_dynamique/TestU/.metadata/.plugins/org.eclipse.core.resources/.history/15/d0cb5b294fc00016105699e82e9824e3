import static org.junit.Assert.*;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;


public class PolynomeTest {

	@Before
	public void setUp() throws Exception {
	}

	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void testPolynome() {
		Polynome p = new Polynome();
		assertNotNull(p);
		assertEquals(p.getTaillemin(), 10);
		assertEquals(p.getNbMonomes(),0);
	}

	@Test
	public void testPolynomeInt() {
		fail("Not yet implemented");
	}
	
	private static Polynome createPoly (double [] coef, int[] exp){
		Polynome res = new Polynome(exp[exp.length-1]+1);
		for (int i = 0; i<exp.length;i++){
			res.ajouterMonome(new Monome(coef[i],exp[i]));
		}
		return res ; 
	}

	@Test
	public void testAjouterMonomeMonome() {
		
		// Test Polynome comportant 1 seul Monome
		Polynome p = new Polynome();
		assertEquals(p.toString(), "null");
		p.ajouterMonome(new Monome (0,0));
		assertEquals(p.toString(), "0");
		
		p = new Polynome();
		p.ajouterMonome(new Monome (1,0));
		assertEquals(p.toString(), "1.0");
		
		p = new Polynome();
		double coef = Math.random();
		p.ajouterMonome(new Monome (coef,0));
		assertEquals(p.toString(), ""+coef);
		
		// Cas plusieurs Monomes
		p = new Polynome();
		p.ajouterMonome(new Monome (2,0));
		p.ajouterMonome(new Monome (1,1));
		assertEquals(p.toString(),"x+2.0");
		p.ajouterMonome(new Monome (-1,2));
		assertEquals(p.toString(),"-x^2+x+2.0");
		p.ajouterMonome(new Monome (-3,4));
		assertEquals(p.toString(),"-3.0x^4-x^2+x+2.0");
		
		p = new Polynome();
		p.ajouterMonome(new Monome (2,0));
		assertEquals(p.toString(),"2.0");
		p.ajouterMonome(new Monome (2,0));
		assertEquals(p.toString(),"4.0");
		
		p = new Polynome();
		p.ajouterMonome(new Monome (2,0));
		assertEquals(p.toString(),"2.0");
		p.ajouterMonome(new Monome (-2,0));
		assertEquals(p.toString(),"0");
 
		p = new Polynome();
		p.ajouterMonome(new Monome (2,1));
		assertEquals(p.toString(),"2.0x");
		p.ajouterMonome(new Monome (-2,1));
		assertEquals(p.toString(),"0");
		
	}

	@Test
	public void testAjouterMonomeDoubleInt() {
		Monome m = new Monome(2,0);
		Polynome p = new Polynome();
		p.ajouterMonome(m);
		assertEquals(p.toString(),"2.0");
	}

	@Test
	public void testLirePolynome() {
		fail("Not yet implemented");
	}

	@Test
	public void testAdditionPolynome() {
		Polynome p1 = null;
		Polynome p2 = null;
		//assertEquals(p1.additionPolynome(p2),null);
		
		Polynome p3 = new Polynome();
		p3.ajouterMonome(new Monome (0,0));
		Polynome p4 = new Polynome();
		p3.ajouterMonome(new Monome (0,0));
		assertEquals(p3.additionPolynome(p4),0);
		
		
		
		/*Polynome p1 = new Polynome(5);
		Polynome p2 = new Polynome(3);
		int i =0;
		while (i < p1.tab.length) {
			if (p1.tab[i].getExposant() == p2.tab[i].getExposant()) {
				p1.ajouterMonome(new Monome(p1.tab[i].getCoefficient() + p2.tab[i].getCoefficient(), p1.tab[i].getExposant()));
			}
		}
		i++;
		assertTrue(p1.tab.length== 8);*/
		
		
	}

	@Test
	public void testMultiplicationPolynome() {
		fail("Not yet implemented");
	}

	@Test
	public void testDeriverPolynome() {
		fail("Not yet implemented");
	}

	@Test
	public void testToString() {
		Polynome p = new Polynome();
		p = new Polynome();
		p.ajouterMonome(new Monome (8,0));
		assertEquals(p.toString(),"8.0");
	}

	@Test
	public void testComparerPolynome() {
		Polynome p1 = new Polynome(4);
		Polynome p2 = new Polynome(4);
		
        assertTrue(p1.comparerPolynome(p2));
		
	}

}
